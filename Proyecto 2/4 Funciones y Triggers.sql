
-------------------------------funciones----------------------------
----------------------------- punto 1 -------------------------------------

CREATE OR REPLACE FUNCTION RENOVACIONESPRO (INTEGER,INTEGER) -- (YEAR, MONTH)
RETURNS VOID AS $$
	BEGIN

		DROP TABLE IF EXISTS RENOVREV;

		CREATE TEMPORARY TABLE RENOVREV AS
		SELECT REVISTA.TITULO, SUSCRREV.FECHAHASTA FROM
		REVISTA JOIN SUSCRREV ON (REVISTA.ISSN = SUSCRREV.ISSN)
		WHERE EXTRACT (YEAR FROM SUSCRREV.FECHAHASTA) = $1
		AND EXTRACT (MONTH FROM SUSCRREV.FECHAHASTA) = $2;

		DROP TABLE IF EXISTS BASESDEDATOS;

		CREATE TEMPORARY TABLE BASESDEDATOS AS
		SELECT SUSCRBDDIGITAL.NOMBRE, VIGENCIAHASTA, PROOVEDOR.NOMBRE 
		AS NOMBRE_PROV, PROOVEDOR.NIT, 
		PROOVEDOR.TELEFONO AS TELEFONO_PROV, CIUDAD.NOM_CUIDAD AS CIUDAD_PROV
		FROM SUSCRBDDIGITAL JOIN BDDIGITAL 
		ON (SUSCRBDDIGITAL.NOMBRE = BDDIGITAL.NOMBRE) 
		JOIN PROOVEDOR ON (PROOVEDOR = NIT)
		JOIN CIUDAD ON (C_CIUDAD = COD_CIUDAD)
		WHERE EXTRACT (YEAR FROM VIGENCIAHASTA) = $1
		AND EXTRACT (MONTH FROM VIGENCIAHASTA) = $2;

	RETURN;
END; $$ LANGUAGE 'plpgsql';

------------------------------------------------------------------------------
SELECT RENOVACIONESPRO (2013,06);
SELECT * FROM BASESDEDATOS;
SELECT * FROM RENOVREV;
---------------------------------punto 2 -------------------------------------
CREATE OR REPLACE FUNCTION EJEMPLARES (VARCHAR(20))
RETURNS TABLE (SIGNATURA INT) AS $$
BEGIN

	-- LOS QUE ESTAN EN PRESTAMO
	RETURN QUERY SELECT EJEMPLARLIBRO.SIGNATURA FROM EJEMPLARLIBRO 
	JOIN LIBROS ON (LIBROS.ISBN = EJEMPLARLIBRO.ISBN)
	WHERE  TITULO = $1 AND EJEMPLARLIBRO.SIGNATURA NOT
	IN (SELECT EJEMPLARLIBRO.SIGNATURA FROM PRESTAMO JOIN EJEMPLARLIBRO 
	ON (PRESTAMO.SIGNATURA = EJEMPLARLIBRO.SIGNATURA) 
	JOIN LIBROS ON (LIBROS.ISBN = EJEMPLARLIBRO.ISBN)) ;
END; $$ LANGUAGE 'plpgsql';


SELECT EJEMPLARES ('MOBY DICK');
-----------------------------punto 3------------------------------------------


---------------------------Triggers------------------------------------------
 
---------------------------Punto 1-------------------------------------------
CREATE OR REPLACE FUNCTION TRIGGER1() 
RETURNS TRIGGER AS $TRIGGER1$
	DECLARE 
	BEGIN
	IF (TG_OP = 'INSERT') THEN
		UPDATE EJEMPLARLIBRO SET DADADEBAJA = 'NO', FECHADADABAJA = NULL
		FROM  LIBROS
		JOIN COMPRALIBROS ON (COMPRALIBROS.ISBN = LIBROS.ISBN)
		WHERE (EJEMPLARLIBRO.ISBN = LIBROS.ISBN)
		AND CAST(DATE(NOW())- DATE(FECHACOMPRA)AS INTEGER) < 1826 ;/*aqui
		se comprueba si la fecha de la compra fue hace menos de 5 
		años o 1826 dias*/
		RAISE NOTICE 'NO SE PUEDE MANDAR A DADA DE BAJA SI SE COMPRÓ HACE MENOS DE 5 AÑOS';
	 END IF;
RETURN NULL;
END;
$TRIGGER1$ LANGUAGE 'plpgsql';
 
DROP TRIGGER IF EXISTS TRIGGER1 ON EJEMPLARLIBRO;

CREATE TRIGGER TRIGGER1 AFTER INSERT OR UPDATE ON EJEMPLARLIBRO FOR EACH ROW
EXECUTE PROCEDURE TRIGGER1();

INSERT INTO EJEMPLARLIBRO VALUES(5119,51,'SI','2012-12-22');-- QUEDARA 'NO'
-- Y FECHA NULL
INSERT INTO EJEMPLARLIBRO VALUES(5118,51,'SI','2012-12-22');
INSERT INTO EJEMPLARLIBRO VALUES(5180,51,'NO',NULL);

INSERT INTO LIBROS VALUES(53,'A','B','C',3,2001,'OTROS','BLA BLA BLA BLA');
INSERT INTO COMPRALIBROS VALUES (44,53,7,130000,'2004-01-23');
INSERT INTO EJEMPLARLIBRO VALUES (5312,53,'SI','2011-12-31');-- COMO ESTE TIENE MAS DE 5 
--AÑOS, ENTONCES NO ES AFECTADO POR EL TRIGGER
----------------------Punto 2--------------------------------------------

CREATE OR REPLACE FUNCTION TRIGGER2()
RETURNS TRIGGER AS $TRIGGER2$
DECLARE
BEGIN
IF (TG_OP = 'INSERT') THEN
	DELETE FROM PRESTAMO USING USUARIO 
	WHERE ESTADO = 'INACTIVO' 
	AND MULTA > 0 ; 
	RAISE NOTICE 'SE ELIMINARA SI EL USUARIO ESTÁ INACTIVO';
END IF;
RETURN NULL;
END;
$TRIGGER2$ LANGUAGE 'plpgsql';

DROP TRIGGER IF EXISTS TRIGGER2 ON PRESTAMO;

CREATE TRIGGER TRIGGER2 AFTER INSERT ON PRESTAMO FOR EACH ROW
EXECUTE PROCEDURE TRIGGER2();
-------------------------------------------------------
CREATE OR REPLACE FUNCTION TRIGGER2REV()
RETURNS TRIGGER AS $TRIGGER2REV$
DECLARE
BEGIN
IF (TG_OP = 'INSERT') THEN
	DELETE FROM PRESTAMOREV USING USUARIO 
	WHERE ESTADO = 'INACTIVO' 
	AND MULTA > 0 ; 
	RAISE NOTICE 'SE ELIMINARA SI EL USUARIO ESTÁ INACTIVO';
END IF;
RETURN NULL;
END;
$TRIGGER2$ LANGUAGE 'plpgsql';

DROP TRIGGER IF EXISTS TRIGGER2REV ON PRESTAMOREV;

CREATE TRIGGER TRIGGER2REV AFTER INSERT ON PRESTAMOREV FOR EACH ROW
EXECUTE PROCEDURE TRIGGER2REV();

INSERT INTO USUARIO VALUES (555,'A','BDD','1989-03-22',81,'CALLE 1',99, 33443333,22222222,'ALGO@HOTMAIL.COM','INACTIVO',2500,1000);

INSERT INTO PRESTAMO VALUES (4914,555,'2013-05-22','2013-06-15',0,NULL);

------------------------PUNTO 3--------------------------------------------------
CREATE OR REPLACE FUNCTION TRIGGER3LIBRO()
RETURNS TRIGGER AS $TRIGGER3LIBRO$
DECLARE
BEGIN 

IF (TG_OP = 'INSERT') THEN
 
UPDATE USUARIO SET ESTADO ='INACTIVO', MULTA = NEW.MULTA + MULTALIBRO.VALOR WHERE CC = NEW.CC
AND FECHADEVOL < FECHADEVUELTO;
RAISE NOTICE 'GENERANDO'; 
END IF;

RETURN NEW;

END; 
$TRIGGER3LIBRO$ LANGUAGE 'plpgsql';

DROP TRIGGER IF EXISTS TRIGGER3LIBRO ON MULTALIBRO;

CREATE TRIGGER TRIGGER3LIBRO AFTER INSERT OR UPDATE ON MULTALIBRO
FOR EACH ROW EXECUTE PROCEDURE TRIGGER3LIBRO();

DROP TRIGGER IF EXISTS TRIGGER3REV ON MULTALIBRO;

CREATE TRIGGER TRIGGER3REV AFTER INSERT OR UPDATE ON MULTALIBRO
FOR EACH ROW EXECUTE PROCEDURE TRIGGER3LIBRO();

INSERT INTO MULTALIBRO VALUES (110,1416,'2013-06-15','2013-06-24',2500);

SELECT * FROM USUARIO WHERE CC=110;
